; mod_oauth.conf

; This allows you to configure OAuth access information for
; modules in the BBS that may use it (such as the mail server)
; This can be used to provide a transparent OAuth proxy
; to applications that do not natively support it (or if
; you are the user don't want to deal with it).

[general] ; This section is not used, but is reserved for future possible use.

; Define one or more sections containing OAuth client information as follows:
;
; This is an example OAuth client for Gmail.
;[myoauth] ; The name of the OAuth client, which must be referenced in other BBS modules.
;
; Note: This sample contains a phony client ID, secret and token, so save yourself some work and don't try to use them!
; Instead, use these steps: https://github.com/simonrob/email-oauth2-proxy#oauth-20-client-credentials
; While you could technically use the client ID/secret application baked into an open source application (e.g. Thunderbird),
; this is not recommended; you should register your own OAuth client ID/secret that you can use, so you can troubleshoot.
;
; The following instructions apply to Gmail:
; 1. For Gmail, register a Web application instead of a Desktop application, and then add
; http://localhost as an allowed Redirect URI.
; Also fill out all the information or you may get a cryptic error, because Google thinks it's a spammy request.
; For Gmail, there are 2 steps: first, you need to get the authorization code,
; and then you need to use that to get the tokens (including the refresh token).
; 2. After you've created an OAuth web application as online guides will walk you through,
; visit the following URL (substitute first):
; https://accounts.google.com/o/oauth2/auth?client_id=CLIENTID&redirect_uri=http://localhost&response_type=code&scope=https%3A%2F%2Fmail.google.com%2F&access_type=offline&prompt=consent
; 3. Once you grant access to your account, Google will redirect to a page on localhost (that probably won't load anything).
;    However, the redirected URL will contain a code in the URL. Copy this code.
;    Note that this a one-time code. If you mess up on a later step, you'll need to repeat this step and get a new authorization code.
;
; 4. To get the actual tokens from the authorization code, run this curl command (substitute first):
; curl --request POST --data "code=AUTHCODE&client_id=CLIENTID&client_secret=CLIENTSECRET&redirect_uri=http://localhost&grant_type=authorization_code" https://oauth2.googleapis.com/token
;
; 5. If everything worked, you should get a JSON response that contains both an access token and a refresh token.
;    The access token is what actually grants access and is good for an hour.
;    The refresh token is persistent and can be used to obtain new access tokens in the future.
;    For this config, we want the refresh token since that won't change, and will enable the BBS to get new access tokens on your behalf.
;    For example, the following curl command will get a new access token using your refresh token:
; curl -v --request POST --data "client_id=CLIENTID&client_secret=CLIENTSECRET&grant_type=refresh_token&refresh_token=REFRESH TOKEN" https://oauth2.googleapis.com/token
;    The response is similar to the auth code -> token request, except only an access token is returned, not another refresh token.
;
; You MAY specify an access token but SHOULD NOT because these are short lived (only good for an hour).
; This may be useful for testing if you know if you have a valid access token and want to use that for something,
; but the refresh token is needed to renew to get new access tokens regularly.
; Generally, do not specify an accesstoken since the refreshtoken can be used to get one automatically.
;
;clientid=490664354550-sog8fs987gfdufdjf89fDdsifugffdf9.apps.googleusercontent.com
;clientsecret=sdgyugUGuOSfduoOUGF-Pgfd
;accesstoken=
;refreshtoken=1//01357485r_o8rwySUOIGFSD8dfgd-L8eyfdufOf8uysfodshfiewyar8382roeyhfdsfisdfo_Asdas980d90asdud-OASDyddfo
;expires=3600 ; How long access tokens are valid for. Default is 1 hour. The refresh token will be used to obtain a new access token if the old one has expired.
;posturl=https://oauth2.googleapis.com/token ; Endpoint to get new access tokens using the refresh token
;userid=0 ; User ID to restrict the use of this token to a particular BBS user.
          ; Default for mod_oauth.conf is 0 (any user may reference any section name here).
          ; For .oauth.conf files in users' home directories, the userid is always the user's ID and cannot be set otherwise.
          ;
          ; ***** SECURITY WARNING WARNING WARNING WARNING WARNING *****
          ; Usage of this module comes with serious security implications. Do not use it until you have read and understood the below.
          ;
          ; Note that these section names are referenced in the .imapremote (for IMAP proxy) and .rules (MailScript, for SMTP relaying) files.
          ; .rules is located in the root maildir, but .imapremote is located in the user's home directory and thus user-writable.
          ; This potentially makes cross user token use possible if tokens are configured that do not have a userid restricting usage.
          ; For example, if Alice knows that Bob's token is in an unprotected config section named "bob-personal",
          ; she could reference that in either .imapremote or .rules.
          ; If a userid is set, the IMAP and SMTP servers will reject tokens that do not belong to the user.
          ; Therefore, userid= SHOULD be specified for all OAuth sections to avoid cross-user token use.
          ; For tokens configured by users in .oauth.conf in their home directories, the user ID is always that user's ID.
