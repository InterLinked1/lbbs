; menus.conf
; This file contains all the menus and options on the BBS.
; It is the heart of the BBS and must be present for the BBS to start.

[general] ; General options that apply to all menus.
case=no ; Options are case insensitive. If you set this to yes, then 'g' and 'G' can be used to do different things, for example.
        ; If case=no, then all options, even lowercase ones, will be displayed in uppercase, and either lower/upper can be used.
		; Default is 'no'.

[main] ; Every menus.conf must have a [main] menu. This is the entry point to the BBS after login/welcome page.
title = Welcome to the BBS! ; Title to print on first line of screen.
; Menu items are a single letter or number denoting the key used to select the option
; To navigate into a submenu without having to navigate each intermediate menu individually,
; users can also use the / key and specify the entire menu sequence all at once.
; e.g. instead of having to select A, then B, then C, just type /ABC and hit ENTER.
; This is particularly useful on slow connections or small displays since you don't have to look
; at the intervening menus or even render them.

; Each menu item has a "handler" that is responsible for handling that menu option, if selected. Valid handlers are:
; menu - Recursively display another menu. The maximum menu depth is 12.
; return - Return to the previous menu
; quit - Quit the BBS, with confirmation prompt
; fastquit - Quit the BBS, without confirmation
; door - Execute a door module. These modules are in the "doors" directory of the BBS source tree.
;   For modularity, most functionality in the BBS is implemented as a "door" module, even if internal to LBBS.
; file - Display a text file using the builtin file pager.
; exec - Execute a program, without any isolation from the underlying system. ABSOLUTELY DO NOT USE WITH UNTRUSTED PROGRAMS!
; isoexec - Execute a program in a sandboxed container. This is the RECOMMENDED way of executing external programs, when possible,
;   since their execution is isolated from the rest of your system as much as possible. The container is run in its own
;   namespace. This option is the most secure, as it does not support network connectivity, ideal for programs like shells,
;   text editors, file managers, and any programs that can run fully offline.
;   Most directories inside the container aside from /home, /tmp, and a few others are mounted read only from the
;   container template, to conserve disk space.
;   The filepath to isoexec is NOT the path on the host system; it is the path inside of the container. You will thus need
;   to ensure the program binary is in the container prior to attempting to run it (you can use external/isoroot to administer the container).
;   and that any libraries or runtime dependencies required are also present in the container.
;   Currently, this handler is only supported on Linux (BSD not supported), and requires further configuration in system.conf.
; isonetexec - Same as isoexec, but retain network connectivity through the host. Note that even though this still runs inside a container,
;   it may still be dangerous for some applications, as the network access is unrestricted. This would allow users with the ability to establish
;   network connections to perform arbitrary network operations, e.g. sending spam email to other mail servers.
;   Currently, there is no option to restrict network access, it is all or nothing, so this handler is required if any network connectivity is required.
;   However, this is still safer than using "exec".

; Menus are drawn automatically (unless the display option is used) based on screen size and menu options, in the order listed below.
; Menus can also execute other menus, so you can have layers of menus and submenus. Syntax is menu:<menu name>
;M = menu:main|Main Menu ; in fact, you can even recurse into the same menu over and over again,
                         ; but you should NOT do this because you will blow the menu stack.
C = door:chat:general|Chat ; Execute the "chat" door with argument "general" (name of the channel, in this case)
M = door:mail|Mail|minpriv=1 ; Launch the evergreen mail client (recommended for LBBS)
F = isoexec:/bin/filemgr -d -u|Files ; File manager for uploading/downloading files via ZMODEM. DO NOT CHANGE isoexec to exec as that will expose your entire filesystem!
U = menu:utilities|${COLOR_RED}Utilities${COLOR_NONE} ; you can also specify the colors to use. Colors are global variables
;R = file:/home/bbs/announcements.txt|Read Announcements ; the file handler allows navigating a file from the terminal using the BBS file viewer.
W = door:listusers:active|Who's Online ; List all users that are online currently
L = door:listusers|List Users ; List all users on the BBS
N = door:listnodes|List Nodes ; List all nodes
S = door:listnodes:${BBS_USERNAME}|My Sessions|minpriv=1 ; List a user's sessions
? = door:tutorial|Help ; Launch the new user tutorial. You can also replace this with your own help system.
0 = door:msg|Msg Sysop ; Contact the sysop
; These are some special "builtin" menu handlers that menus can handle:
G = quit|Goodbye (Logoff) ; prompts confirmation to quit
Q = fastquit|Goodbye Fast ; no confirmation to quit

[games]
;artfile = /home/bbs/art.ANS ; ANSI art file to display, for ANSI terminals. Will be displayed before the first iteration of a menu execution.
title = Shall we play a game, ${BBS_USERNAME}?
;subtitle = Do you feel lucky? ${dailytagline}? ; There are certain variables you can use in menus.conf to customize menus on the fly.
                                            ; Run /variables and /node <nodenum> from the sysop console to see available variables.
									        ; Variables can be used for anything in menus.conf. They are substituted at runtime.
									        ; You can also set your own variables in variables.conf to reduce duplication within menus.conf.
											; WARNING: The use of tabs (${TAB}) may lead to formatting inconsistencies. Spaces provided stronger formatting guarantees.
;display = ${COLOR_BLUE}M${COLOR_GREEN} Mail ${TAB}${TAB}${BBS_TIME} ; you can manually generate the menu screen yourself, rather than dynamically.
;display = ${COLOR_BROWN}Q${COLOR_GREEN} ${TAB} Return ; Just put each line on a separate display= directive line.
;M = exec:mymailprog ${BBS_USERNAME}|Mail ; Here, the M option executes the "mymailprog" with the user's username as an argument.
Q = return|Back ; return back to previous menu, or quit if no menus left on the stack

[utilities]
B = door:calc|Calculator ; calculator utility
C = exec:cal|Calendar ; display a calendar by executing "cal" from the bsdmainutils package
D = door:dict|Dictionary ; dictionary tool
T = exec:date|Date & Time ; Display current date/time
; If requiregroup is specified, the user must be a member of the group defined in groups.conf to access or see this option.
S = exec:/var/lib/lbbs/external/sigwinch|Window Size|requiregroup=mygroup ; demo program that displays current terminal size
; Each menu should always contain at least an option for one of the following: quit, fastquit, or return
; If you don't provide at least one of these, users have no way of going back where they came from or exiting the menu,
; and this is about as nice as dragging your park visitors in Rollercoaster Tycoon and dropping them into the lake.
Q = return|Back ; return back to previous menu, or quit if no menus left on the stack
; You can also specify "menu item modifiers" which restrict or modify the availability of menu items in certain ways.
; X = isoexec:/bin/sh|Shell|minpriv=50 ; Allow users with privilege level of at least 50 to get a shell prompt. (CAREFUL! THIS MAY BE DANGEROUS!)
;   The isoexec handler is similar to exec, except that it executes the specified program in a separate namespace (essentially in a container).
;   This can reduce the attack surface of executing external programs (or even more dangerous doors, like system shells),
;   since they are relatively isolated from the root namespaces. However, this does not guarantee perfect security and caution is still advised.
;
;   The path of the program name provided to isoexec IS NOT the path on the root filesystem, but rather the path within the container's root file system.
;   Refer to system.conf for configuration of the container environment.
;
;   Some work is required to enable isoexec to work properly, namely you will need to create a root filesystem for use in the container.
;   See scripts/gen_rootfs.sh for an example.
;
